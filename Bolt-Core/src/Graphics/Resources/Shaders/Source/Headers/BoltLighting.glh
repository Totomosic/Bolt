R"(#include "BoltMaterials.glh"

const int LIGHT_TYPE_POINT = 0;
const int LIGHT_TYPE_DIRECTIONAL = 1;
const int LIGHT_TYPE_SPOTLIGHT = 2;

const int MAX_LIGHTS = 10;

struct LightSource
{
	vec3 Position;
	vec4 Color;
	float Intensity;
	vec3 Attenuation;
	int Type;
	float AmbientIntensity;
	vec3 ForwardDirection;
	float SpotAngle;
};

vec4 CalculateDiffuseLighting(Material2D material, LightSource light, vec3 normal, vec3 toLightVector)
{
	float distance = length(toLightVector);
	vec3 unitToLightVector = normalize(toLightVector);
	vec3 unitNormal = normalize(normal);
	float nDotV = dot(unitNormal, unitToLightVector);
	float brightness = max(nDotV, light.AmbientIntensity);
	//float attenuationFactor = light.Attenuation.x + light.Attenuation.y * distance + light.Attenuation.z * distance * distance;
	//brightness /= attenuationFactor;
	vec4 c = material.DiffuseColor * light.Color * brightness * light.Intensity;
	c.a = material.DiffuseColor.a * light.Color.a;
	return c;
}

vec4 CalculateSpecularLighting(Material2D material, LightSource light, vec3 normal, vec3 toLightVector, vec3 toCameraVector)
{
	float toLightDistance = length(toLightVector);
	vec3 unitToLightVector = normalize(toLightVector);
	vec3 unitNormal = normalize(normal);
	vec3 unitToCameraVector = normalize(toCameraVector);
	vec3 lightDirection = -unitToLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	float specularFactor = max(dot(reflectedLightDirection, unitToCameraVector), 0);
	float dampedSpecularFactor = pow(specularFactor, material.ShineDamper);
	//float attenuationFactor = light.Attenuation.x + light.Attenuation.y * distance + light.Attenuation.z * distance * distance;
	//dampedSpecularFactor /= attenuationFactor;
	return material.SpecularHighlight * light.Color * dampedSpecularFactor * material.Shininess * light.Intensity;
})"